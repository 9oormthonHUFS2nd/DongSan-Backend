plugins {
    id 'java'
    id 'java-library'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'jacoco'
    id "org.sonarqube" version "5.1.0.4882"
}

group = 'com.dongsan'
version = '1.0.0'

allprojects {
    tasks.withType(JavaCompile).configureEach {
        sourceCompatibility = '17'
        targetCompatibility = '17'
    }

    repositories {
        mavenCentral()
    }
}

import java.util.stream.Collectors

def excludeFromCoverage = new ArrayList<String>()
file('coverage-exclude.asap').withInputStream() { it ->
    excludeFromCoverage.addAll(new BufferedReader(new InputStreamReader(it))
            .lines()
            .parallel()
            .map(s -> s.substring(7).strip())
            .collect(Collectors.toList()))
}

jacoco{
    toolVersion = '0.8.12'
}

sonar {
    properties {
        property "sonar.projectKey", "DongSanOfficial_DongSan-Backend"
        property "sonar.organization", "dongsan"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml").get().asFile.absolutePath
    }
}

// 커버리지 결과를 리포트로 생성하는 작업
tasks.register('jacocoRootTestReport', JacocoReport) {
    dependsOn subprojects.collect {
        it.tasks.named('test')
    }

    // 서브프로젝트의 .exec 파일을 포함
    executionData.from(fileTree(dir: '.', include: '**/build/jacoco/*.exec'))
    executionData.from(fileTree(dir: '.', include: '**/**/build/jacoco/*.exec'))

    reports {
        xml.required = true
        html.required = true
        csv.required = false
        html.outputLocation = file('build/jacocoTestReportHtml')
        xml.outputLocation = file('build/reports/jacoco/test/jacocoTestReport.xml')
    }

    classDirectories.setFrom(files(subprojects.collect {
        // 서브 프로젝트들의 컴파일된 클래스 파일이 저장되는 디렉토리
        it.sourceSets.main.output
    }).asFileTree.matching {
        exclude excludeFromCoverage.stream()
                .map(s -> s + ".class")
                .collect(Collectors.toList())
    })

    finalizedBy 'jacocoTestVerification'
}


// 커버리지 측정을 위한 조건을 명시하는 task
tasks.register('jacocoTestVerification') {
    dependsOn 'jacocoRootTestReport' // 리포트 생성 후 실행

    doLast {
        // 커버리지 검증 로직 추가
        def coverageRules = [
                [
                        enabled: true,
                        element: 'CLASS',
                        limits: [
                                [counter: 'LINE', value: 'COVEREDRATIO', minimum: 0.0],
                                [counter: 'METHOD', value: 'COVEREDRATIO', minimum: 0.0]
                        ],
                        excludes: excludeFromCoverage.stream()
                                .map(s -> s.replace("/", "."))
                                .collect(Collectors.toList())
                ]
        ]

    }
}

test.dependsOn 'jacocoRootTestReport'

tasks.withType(Test).configureEach {
    useJUnitPlatform()
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        // lombok
        implementation('org.projectlombok:lombok')
        annotationProcessor('org.projectlombok:lombok')
        testImplementation('org.projectlombok:lombok')
        testAnnotationProcessor('org.projectlombok:lombok')

        // servlet
        implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'

        // spring boot starter
        implementation 'org.springframework.boot:spring-boot-starter'

        // Spring Boot Test
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

//        // Fixture Monkey
//        testImplementation 'com.navercorp.fixturemonkey:fixture-monkey-starter:1.0.23'
//        testImplementation("com.navercorp.fixturemonkey:fixture-monkey-jackson:0.3.0")

        // JTS
        implementation 'org.locationtech.jts:jts-core:1.20.0'

        // JDBC
        implementation 'org.springframework.boot:spring-boot-starter-jdbc'

        // JUnit5
        testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    }

    bootJar{
        enabled = false
    }

    jar{
        enabled = true
    }

}

if (project == rootProject) {
    bootJar {
        enabled = false
    }
}